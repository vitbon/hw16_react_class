{"version":3,"sources":["logo.svg","serviceWorker.js","contacts/contacts.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","contactsMock","firstName","lastName","phone","gender","Contacts","state","contacts","filtered","search","isMale","isFemale","isUnisex","a","setState","filterData","handleSearchChange","ev","target","value","searchLwr","toLowerCase","fltr","filter","man","undefined","item","includes","console","log","className","type","placeholder","this","onChange","id","name","checked","map","cnt","str","sign","getMFIcon","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.292e650b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from \"react\";\r\nimport \"./contacts.css\";\r\n\r\nconst contactsMock = [{\r\n  firstName: \"Барней\",\r\n  lastName: \"Стинсовський\",\r\n  phone: \"+380956319521\",\r\n  gender: \"male\"\r\n}, {\r\n  firstName: \"Робін\",\r\n  lastName: \"Щербатська\",\r\n  phone: \"+380931460123\",\r\n  gender: \"female\"\r\n}, {\r\n  firstName: \"Анонімний\",\r\n  lastName: \"Анонімус\",\r\n  phone: \"+380666666666\"\r\n}, {\r\n  firstName: \"Лілія\",\r\n  lastName: \"Олдровна\",\r\n  phone: \"+380504691254\",\r\n  gender: \"female\"\r\n}, {\r\n  firstName: \"Маршен\",\r\n  lastName: \"Еріксонян\",\r\n  phone: \"+380739432123\",\r\n  gender: \"male\"\r\n}, {\r\n  firstName: \"Теодор\",\r\n  lastName: \"Мотсбес\",\r\n  phone: \"+380678123456\",\r\n  gender: \"male\"\r\n}, {\r\n  firstName: \"Іван\",\r\n  lastName: \"Нечуй-Левицький\",\r\n  phone: \"+380935554422\",\r\n  gender: \"male\"\r\n}, {\r\n  firstName: \"Леся\",\r\n  lastName: \"Українка\",\r\n  phone: \"+380991234567\",\r\n  gender: \"female\"\r\n}, {\r\n  firstName: \"Невідомий\",\r\n  lastName: \"Безхатченко\",\r\n  phone: \"+380999999999\",\r\n}, {\r\n  firstName: \"Остап\",\r\n  lastName: \"Вишня\",\r\n  phone: \"+380972231199\",\r\n  gender: \"male\"\r\n}, {\r\n  firstName: \"Марко\",\r\n  lastName: \"Вовчок\",\r\n  phone: \"+380989876543\",\r\n  gender: \"female\"\r\n}];\r\n\r\nfunction getMFIcon(str) {\r\n  let sign = \"\";\r\n  switch (str) {\r\n    case 'male': sign = \"👨\"; break;\r\n    case 'female': sign = \"👩\"; break;\r\n  }\r\n  return sign;\r\n}\r\n\r\nexport default class Contacts extends Component {\r\n  state = {\r\n    contacts: [...contactsMock], // TODO: Remove Mock\r\n    filtered: [...contactsMock],\r\n    search: '',\r\n    isMale: true,\r\n    isFemale: true,\r\n    isUnisex: true\r\n  };\r\n\r\n  isMale = async() => {\r\n    await this.setState( {isMale: !this.state.isMale});\r\n    this.filterData();\r\n  };\r\n\r\n  isFemale = async() => {\r\n    await this.setState({ isFemale: !this.state.isFemale });\r\n    this.filterData();\r\n  };\r\n\r\n  isUnisex = async() => {\r\n    await this.setState({ isUnisex: !this.state.isUnisex });\r\n    this.filterData();\r\n  };\r\n\r\n  handleSearchChange = async (ev) => {\r\n    await this.setState({search: ev.target.value});\r\n    this.filterData();\r\n  };\r\n\r\n  filterData = async() => {\r\n    await this.setState(() => {\r\n      const searchLwr = this.state.search.toLowerCase();\r\n      const fltr = this.state.contacts.filter(man =>\r\n        ((man.gender === 'male') && this.state.isMale) ||\r\n        ((man.gender === 'female') && this.state.isFemale) ||\r\n        ((man.gender === undefined) && this.state.isUnisex))\r\n        .filter(item =>\r\n          item.firstName.toLowerCase().includes(searchLwr) ||\r\n          item.lastName.toLowerCase().includes(searchLwr) ||\r\n          item.phone.toLowerCase().includes(searchLwr) );\r\n      console.log(fltr);\r\n      return {\r\n        filtered: [...fltr],\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"bg\">\r\n        <div className=\"container\">\r\n          <div className=\"search\">\r\n            <input className=\"search__btn\" type=\"search\" placeholder=\"Search...\" value={this.state.search}\r\n                   onChange={this.handleSearchChange}>\r\n            </input>\r\n            <label className=\"check\" id=\"man\" onChange={this.isMale}>\r\n              <input type=\"checkbox\" name=\"man\" checked={this.state.isMale}></input>\r\n              👨\r\n            </label>\r\n            <label className=\"check\" id=\"woman\" onChange={this.isFemale}>\r\n              <input type=\"checkbox\" name=\"woman\" checked={this.state.isFemale}></input>\r\n              👩\r\n            </label>\r\n            <label className=\"check\" id=\"unisex\" onChange={this.isUnisex}>\r\n              <input type=\"checkbox\" name=\"unisex\" checked={this.state.isUnisex}></input>\r\n              undefined\r\n            </label>\r\n          </div>\r\n          <div className=\"header\">\r\n            <span className=\"name\">First Name</span>\r\n            <span className=\"name\">Last Name</span>\r\n            <span className=\"phone\">Phone</span>\r\n            <span className=\"sex\">Sex</span>\r\n          </div>\r\n            { this.state.filtered.map((cnt) => (\r\n              <div className=\"contacts\">\r\n                <span className=\"name\">{cnt.firstName}</span>\r\n                <span className=\"name\">{cnt.lastName}</span>\r\n                <span className=\"phone\">{cnt.phone}</span>\r\n                <span className=\"sex\">{getMFIcon(cnt.gender)}</span>  {/*  ♀ ♂ ⚲ ♂ ♀ 👩 👨 */}\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n\r\n// Завдання Basic:\r\n//   У результаті у вас має вийти компонент Contracts, який працює з логікою (state) та компонент Contract, який просто\r\n//   відображає номер телефону, ім'я та прізвище контакта.\r\n// 1.\tВідобразити список контактів (можна по дизайну орієнтуватись на iOS/Android контакти)\r\n// 2.\tДодати поле пошуку перед списком.\r\n// 3.\tПри вводі тексту у поле пошуку – фільтрувати по прізвищу користувача.\r\n// (Тобто, якщо у полі ввести \"еріксон\" – відобразиться лише контакт Маршен Еріксонян\"\r\n// Також невеликий план, який допоможе зробити правильно домашнє завдання\r\n// 1.\tСтворюємо проєкт за допомогою CRA\r\n// 2.\tСтворюємо компонент Contracts. (Робимо класовий або функціональний з хуками)\r\n// 3.\tДодаємо у state масив contacts Врахуйте, contacts потрібно додати всередину об'єкта state (!).\r\n// Щоб можна було звертатись як state.contacts\r\n// 4.\tПишемо метод render для відмальовки даних з state. На цьому етапі можна відобразити хоча б імена\r\n// 5.\tСтворюємо компонент Contact. Робимо необхідну верстку\r\n// 6.\tЗ props дістаємо необхідні дані та розміщуємо їх у верстці (firstName, lastName, phone, gender)\r\n// 7.\tУ компоненті Contacts – додайте у рендері масиву – компонент Contact. Ви можете передати всі значення з елементу\r\n// вашого масиву state.contacts за допомогою spread оператора. {...contact}\r\n// 8.\tДороблюємо стилізацію, виправляємо верстку якщо необхідно\r\n// 9.\tДодаємо поле вводу (input) перед списком контактів\r\n// 10.\tВ state додаємо ще одне значення search\r\n// 11.\tВиводимо в value атрибут інпуту значення з state.search\r\n// 12.\tДодаємо обробник події onChange у інпута. Функція обробки події(handleSearchChange) – має змінювати state.search\r\n// на підставі event.target.value\r\n// 13.\tТепер ви можете додати логіку в функцію handleSearchChange. Вам необхідно брати початковий масив contacts\r\n// та відфільтрувавши його за допомогою функції filter – помістити в state\r\n// Завдання Advanced:\r\n//   1.\tДодайте іконку статі до контактів(Ч, Ж)\r\n// 2.\tЗробіть так, щоб пошук фільтрував по імені/прізвищу/номеру.\r\n//   Наприклад: в полі пошуку введено \"95\" – ми побачимо контакти Барнеятаи Теодора\r\n// Наприклад: в полі пошуку введено \"він\" – ми побачимо Анонімуса та Еріксоняна\r\n// 3.\tДодайте чекбокси зі статтю(ч, ж, не вказаний). По замовчуванню всі увімкнені. При відключенні чекбокса – відбувається фільтрація.\r\n//   Наприклад: вказані чекбокси ч та не вказаний – ми побачимо Барнея, Теодора, Маршена та Анонімуса\r\n// Наприклад: вказані чекбокси ж та не вказаний – ми побачимо Лілію, Робін та Анонімуса\r\n// Наприклад: вказані чекбокси ч та ж – ми побачимо Лілію, Робін, Барнея, Теодора, Маршена\r\n// Наприклад: вказаний чекбокс не вказані – ми побачимо Анонімуси","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Contacts from './contacts/contacts';\n\nReactDOM.render(\n    <Contacts />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}